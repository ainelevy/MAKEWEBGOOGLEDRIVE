// GoogleDriveIntegration.js - For team.makeweb.com.au

class GoogleDriveIntegration {
    constructor() {
        this.apiBaseUrl = 'https://google.makedev.com.au';
        this.apiToken = 'YOUR_SECURE_API_TOKEN'; // Store this securely
    }

    async checkAuthStatus() {
        try {
            const response = await fetch(`${this.apiBaseUrl}/drive/folder`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiToken}`
                }
            });

            if (response.status === 401) {
                return { authenticated: false };
            }

            const data = await response.json();
            return { authenticated: true, data };
        } catch (error) {
            console.error('Auth check failed:', error);
            return { authenticated: false, error: error.message };
        }
    }

    async initiateOAuth() {
        try {
            const response = await fetch(`${this.apiBaseUrl}/oauth/authorize`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiToken}`
                }
            });

            const data = await response.json();
            
            // Open OAuth window
            const authWindow = window.open(
                data.auth_url,
                'Google OAuth',
                'width=500,height=600'
            );

            // Listen for OAuth completion
            return new Promise((resolve, reject) => {
                const checkInterval = setInterval(() => {
                    try {
                        if (authWindow.closed) {
                            clearInterval(checkInterval);
                            this.checkAuthStatus().then(result => {
                                if (result.authenticated) {
                                    resolve(result);
                                } else {
                                    reject(new Error('OAuth window closed without authentication'));
                                }
                            });
                        }
                    } catch (e) {
                        // Cross-origin error, window is still open
                    }
                }, 1000);

                // Timeout after 5 minutes
                setTimeout(() => {
                    clearInterval(checkInterval);
                    authWindow.close();
                    reject(new Error('OAuth timeout'));
                }, 300000);
            });
        } catch (error) {
            console.error('OAuth initiation failed:', error);
            throw error;
        }
    }

    async createFolder(folderName, parentId = null) {
        try {
            const response = await fetch(`${this.apiBaseUrl}/drive/folder?action=create`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiToken}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: folderName,
                    parent_id: parentId
                })
            });

            if (!response.ok) {
                if (response.status === 401) {
                    // Need to re-authenticate
                    const authResult = await this.initiateOAuth();
                    if (authResult.authenticated) {
                        // Retry folder creation
                        return this.createFolder(folderName, parentId);
                    }
                }
                throw new Error(`Failed to create folder: ${response.statusText}`);
            }

            const data = await response.json();
            return data.folder;
        } catch (error) {
            console.error('Folder creation failed:', error);
            throw error;
        }
    }

    async listFolders(query = '') {
        try {
            const url = new URL(`${this.apiBaseUrl}/drive/folder`);
            if (query) {
                url.searchParams.append('q', query);
            }

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiToken}`
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to list folders: ${response.statusText}`);
            }

            const data = await response.json();
            return data.folders;
        } catch (error) {
            console.error('Folder listing failed:', error);
            throw error;
        }
    }
}

// WizardExtension.js - Extension for your existing wizard

class WizardGoogleDriveStep {
    constructor(wizardInstance) {
        this.wizard = wizardInstance;
        this.googleDrive = new GoogleDriveIntegration();
        this.projectName = '';
    }

    async initialize() {
        // Check if already authenticated
        const authStatus = await this.googleDrive.checkAuthStatus();
        return authStatus.authenticated;
    }

    renderStep() {
        return `
            <div class="wizard-step" id="google-drive-step">
                <h3>Create Google Drive Folder</h3>
                <div id="auth-status" class="mb-3"></div>
                
                <div id="folder-form" style="display: none;">
                    <div class="form-group">
                        <label for="folder-name">Folder Name</label>
                        <input 
                            type="text" 
                            class="form-control" 
                            id="folder-name" 
                            placeholder="Project folder name"
                            value="${this.projectName}"
                        >
                    </div>
                    
                    <div class="form-group">
                        <label for="parent-folder">Parent Folder (Optional)</label>
                        <select class="form-control" id="parent-folder">
                            <option value="">Root Directory</option>
                        </select>
                        <small class="form-text text-muted">
                            Select a parent folder or leave empty for root
                        </small>
                    </div>
                    
                    <button type="button" class="btn btn-primary" id="create-folder-btn">
                        Create Folder
                    </button>
                </div>
                
                <div id="folder-result" style="display: none;">
                    <div class="alert alert-success">
                        <h4>Folder Created Successfully!</h4>
                        <p>Folder Name: <span id="created-folder-name"></span></p>
                        <p>
                            <a href="#" id="folder-link" target="_blank" class="btn btn-sm btn-secondary">
                                Open in Google Drive
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        `;
    }

    async onStepLoad() {
        const authStatus = await this.initialize();
        const authStatusEl = document.getElementById('auth-status');
        
        if (!authStatus) {
            authStatusEl.innerHTML = `
                <div class="alert alert-warning">
                    <p>You need to authenticate with Google to create Drive folders.</p>
                    <button type="button" class="btn btn-primary" id="auth-btn">
                        Connect to Google Drive
                    </button>
                </div>
            `;
            
            document.getElementById('auth-btn').addEventListener('click', async () => {
                try {
                    const result = await this.googleDrive.initiateOAuth();
                    if (result.authenticated) {
                        this.onStepLoad(); // Reload the step
                    }
                } catch (error) {
                    alert('Authentication failed: ' + error.message);
                }
            });
        } else {
            authStatusEl.innerHTML = `
                <div class="alert alert-success">
                    âœ“ Connected to Google Drive
                </div>
            `;
            
            document.getElementById('folder-form').style.display = 'block';
            
            // Load parent folders
            await this.loadParentFolders();
            
            // Set up create button
            document.getElementById('create-folder-btn').addEventListener('click', () => {
                this.createProjectFolder();
            });
        }
    }

    async loadParentFolders() {
        try {
            const folders = await this.googleDrive.listFolders();
            const select = document.getElementById('parent-folder');
            
            folders.forEach(folder => {
                const option = document.createElement('option');
                option.value = folder.id;
                option.textContent = folder.name;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Failed to load parent folders:', error);
        }
    }

    async createProjectFolder() {
        const folderName = document.getElementById('folder-name').value.trim();
        const parentId = document.getElementById('parent-folder').value || null;
        
        if (!folderName) {
            alert('Please enter a folder name');
            return;
        }
        
        const btn = document.getElementById('create-folder-btn');
        btn.disabled = true;
        btn.textContent = 'Creating...';
        
        try {
            const folder = await this.googleDrive.createFolder(folderName, parentId);
            
            // Show success
            document.getElementById('folder-form').style.display = 'none';
            document.getElementById('folder-result').style.display = 'block';
            document.getElementById('created-folder-name').textContent = folder.name;
            document.getElementById('folder-link').href = folder.webViewLink;
            
            // Store folder info for later use
            this.wizard.projectData.googleDriveFolderId = folder.id;
            this.wizard.projectData.googleDriveFolderLink = folder.webViewLink;
            
        } catch (error) {
            alert('Failed to create folder: ' + error.message);
            btn.disabled = false;
            btn.textContent = 'Create Folder';
        }
    }

    setProjectName(name) {
        this.projectName = name;
        const input = document.getElementById('folder-name');
        if (input) {
            input.value = name;
        }
    }
}

// Integration with existing wizard
// In your main wizard code:

class ProjectWizard {
    constructor() {
        this.steps = [];
        this.currentStep = 0;
        this.projectData = {};
        
        // Add Google Drive step
        this.googleDriveStep = new WizardGoogleDriveStep(this);
    }
    
    addGoogleDriveStep() {
        this.steps.push({
            name: 'Google Drive',
            handler: this.googleDriveStep
        });
    }
    
    // When project name is set in earlier step:
    onProjectNameSet(name) {
        this.projectData.projectName = name;
        this.googleDriveStep.setProjectName(name);
    }
}

// Usage example:
/*
const wizard = new ProjectWizard();
wizard.addStep('Project Info', projectInfoStep);
wizard.addStep('cPanel Setup', cpanelStep);
wizard.addStep('WordPress Install', wordpressStep);
wizard.addGoogleDriveStep(); // Add the Google Drive step
wizard.addStep('Project Management', projectManagementStep);
wizard.start();
*/
